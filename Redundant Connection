class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:

        groups ={i: i for i in range(1,len(edges)+1)}

        def find(child):
            while groups[child] != child:
                child = groups[child]
            return child
        
        def union(p,q):
            p = find(p)
            q = find(q)
            if q != p:
                groups[p] = groups[q]
            return p,q
        answer = [-1,-1]

        for p,q in edges:
            a,b=union(p,q)
            if a == b:
                answer[0]=p
                answer[1] = q
        return answer
