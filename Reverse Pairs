class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        pairs = 0
        def helper(left,right):
            nonlocal pairs
            if left==right:
                return [left]
            mid = left + (right-left)// 2
            left_part = helper(left,mid)
            right_part = helper(mid+1,right)

            left_ptr = 0
            right_ptr = 0
            while left_ptr < len(left_part) and right_ptr<len(right_part):
                if nums[left_part[left_ptr]]> 2*nums[right_part[right_ptr]]:
                    pairs += len(left_part) - left_ptr 
                    right_ptr+=1
                else:
                    left_ptr+=1
            left_ptr = 0
            right_ptr = 0
            ans = []
    
            while left_ptr < len(left_part) and right_ptr<len(right_part):
                if nums[left_part[left_ptr]]> nums[right_part[right_ptr]]:
                    ans.append(right_part[right_ptr])
                    right_ptr+=1
                else:
                    ans.append(left_part[left_ptr])
                    left_ptr+=1
            ans.extend(left_part[left_ptr:])
            ans.extend(right_part[right_ptr:])
            return ans
        helper(0,len(nums)-1)
        return pairs
