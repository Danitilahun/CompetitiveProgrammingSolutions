"""
# Definition for Employee.
class Employee(object):
    def __init__(self, id, importance, subordinates):
    	#################
        :type id: int
        :type importance: int
        :type subordinates: List[int]
        #################
        self.id = id
        self.importance = importance
        self.subordinates = subordinates
"""

class Solution(object):
    def getImportance(self, employees, id):
        """
        :type employees: List[Employee]
        :type id: int
        :rtype: int
        """
        def dfs(id,importance):
            visited.add(id)
            importance[0] += graph[id][0] 
            for sub in graph[id][1]:
                if sub not in visited: 
                    dfs(sub,importance)
        graph = defaultdict(list)
        for employee in employees:
            graph[employee.id].append(employee.importance)
            graph[employee.id].append(employee.subordinates)
        visited = set()
        # print(graph)
        importance=[0]
        dfs(id,importance)
        return importance[0]
